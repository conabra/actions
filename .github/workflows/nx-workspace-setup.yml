name: CI

on:
  workflow_call:
    inputs:
      registry-url:
        required: false
        type: string
      registry-scope:
        required: false
        type: string
      setup-commands:
        required: false
        type: string
      runs-on:
        required: false
        type: string
        default: ubuntu-latest
      # We needed this input in order to be able to configure out integration tests for this repo, it is not documented
      # so as to not cause confusion/add noise, but technically any consumer of the workflow can use it if they want to.
      working-directory:
        required: false
        type: string
    outputs:
      affected:
        description: "List of the affected projects"
        value: ${{ jobs.workspace.outputs.affected }}
        
concurrency:
  group: ci-${{ github.ref }}-1
  cancel-in-progress: true

jobs:
  workspace:
    name: Setup
    runs-on: ${{ inputs.runs-on }}
    defaults:
      run:
        working-directory: ${{ inputs.working-directory || github.workspace }}
        # Specify shell to help normalize across different operating systems
        shell: bash
    outputs:
      affected: ${{ steps.set-matrix.outputs.affected }}
    steps:
      - name: Cancel Previous Runs
        uses: styfle/cancel-workflow-action@0.9.0
        with:
          access_token: ${{ github.token }}

      - name: Checkout [Main]
        uses: actions/checkout@v3
        if: ${{ github.event_name != 'pull_request' }}
        with:
          # We need to fetch all branches and commits so that Nx affected has a base to compare against.
          fetch-depth: 0

      - name: Checkout [Pull Request]
        uses: actions/checkout@v3
        if: ${{ github.event_name == 'pull_request' }}
        with:
          # By default, PRs will be checked-out based on the Merge Commit, but we want the actual branch HEAD.
          ref: ${{ github.event.pull_request.head.sha }}
          # We need to fetch all branches and commits so that Nx affected has a base to compare against.
          fetch-depth: 0

      - name: Run any configured setup-commands
        if: ${{ inputs.setup-commands != '' }}
        run: |
          ${{ inputs.setup-commands }}

      - name: Derive appropriate SHAs for base and head for `nx affected` commands
        uses: nrwl/nx-set-shas@v2
        with:
          main-branch-name: main

      # Set node/npm/yarn versions using setup-node, with optional overrides provided by the consumer
      - name: Set node/npm/yarn versions
        uses: actions/setup-node@v3
        id: versions
        with:
          registry-url: ${{ inputs.registry-url }}
          scope: ${{ inputs.registry-scope }}

      - name: Print Node, NPM and Yarn versions
        run: |
          echo "Node: ${{ steps.versions.outputs.node-version }}"
          echo "NPM: $( npm --version )"
          echo "Yarn: $( yarn --version )"

      - name: Use the node_modules cache if available
        uses: actions/cache@v3
        with:
          path: '**/node_modules'
          key: ${{ runner.os }}-node-${{ steps.versions.outputs.node-version }}-yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-node-${{ steps.versions.outputs.node-version }}-yarn-   

      - name: Install dependencies
        if: ${{ steps.cache.outputs.cache-hit != 'true' }}
        run: |
          echo "Running yarn install --frozen-lockfile"
          yarn install --frozen-lockfile

      - id: set-matrix
        uses: actions/github-script@v6
        with:
          script: |
            const { execSync } = require('child_process');
            const affected = execSync(`npx nx print-affected`).toString('utf-8');
            const projects = JSON.parse(affected).projects.sort();
            console.log(`::set-output name=affected::${JSON.stringify(projects)}`);
